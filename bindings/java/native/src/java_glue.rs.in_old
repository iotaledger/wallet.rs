use std::{
    path::{Path, PathBuf},
    time::Duration,
};

use jni_sys::*;

use java_glue::*;


// PathBuf
foreign_typemap!(
    ($p:r_type) PathBuf => jstring {
        $out = $p.as_path().to_str();
    };
    ($p:f_type, option = "NoNullAnnotations", unique_prefix = "/*chrono*/")
        => "/*chrono*/java.nio.file.Path" "$out = java.nio.file.Paths.get($p);";
);


foreign_typemap!(
    ($p:r_type) jstring => PathBuf {
        $out = PathBuf::from($p);
    };
);

// Duration
foreign_typemap!(
    ($p:r_type) Duration => jlong {
        $out = $p.as_millis()
    };
);

foreign_typemap!(
    ($p:r_type) jlong => Duration {
        $out = Duration::from_millis($p);
    };
);

// ManagerStorage
foreign_enum!(
    enum ManagerStorage {
        None = None,
    }
);

// ANCHOR: api
foreign_class!(class JavaAccountManager {
    self_type JavaAccountManager;
    constructor JavaAccountManager::default() -> JavaAccountManager;
});
/*
foreign_class!(class AccountManager {
    self_type AccountManager;
    fn AccountManager::add_and1(&self, val: i32) -> i32;
    fn AccountManager::greet(to: &str) -> String;
});*/
// ANCHOR_END: api