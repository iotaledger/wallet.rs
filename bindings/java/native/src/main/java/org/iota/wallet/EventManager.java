// Automatically generated by flapigen
package org.iota.wallet;


public final class EventManager {

    private EventManager() {}

    public static EventId subscribe_errors(ErrorListener cb) {
        long ret = do_subscribe_errors(cb);
        EventId convRet = new EventId(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_subscribe_errors(ErrorListener cb);

    public static EventId subscribe_new_transaction(NewTransactionListener cb) {
        long ret = do_subscribe_new_transaction(cb);
        EventId convRet = new EventId(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_subscribe_new_transaction(NewTransactionListener cb);

    public static EventId subscribe_confirmation_state_change(TransactionConfirmationChangeListener cb) {
        long ret = do_subscribe_confirmation_state_change(cb);
        EventId convRet = new EventId(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_subscribe_confirmation_state_change(TransactionConfirmationChangeListener cb);

    public static EventId subscribe_reattachment(ReattachTransactionListener cb) {
        long ret = do_subscribe_reattachment(cb);
        EventId convRet = new EventId(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_subscribe_reattachment(ReattachTransactionListener cb);

    public static EventId subscribe_broadcast(BroadcastTransactionListener cb) {
        long ret = do_subscribe_broadcast(cb);
        EventId convRet = new EventId(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_subscribe_broadcast(BroadcastTransactionListener cb);

    public static EventId subscribe_transfer_progress(TransferProgressListener cb) {
        long ret = do_subscribe_transfer_progress(cb);
        EventId convRet = new EventId(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_subscribe_transfer_progress(TransferProgressListener cb);

    public static EventId subscribe_balance_change(BalanceChangeListener cb) {
        long ret = do_subscribe_balance_change(cb);
        EventId convRet = new EventId(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_subscribe_balance_change(BalanceChangeListener cb);

    public static EventId subscribe_stronghold_status_change(StrongholdStatusListener cb) {
        long ret = do_subscribe_stronghold_status_change(cb);
        EventId convRet = new EventId(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_subscribe_stronghold_status_change(StrongholdStatusListener cb);

    public static EventId subscribe_address_consolidation_needed(AddressConsolidationNeededListener cb) {
        long ret = do_subscribe_address_consolidation_needed(cb);
        EventId convRet = new EventId(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_subscribe_address_consolidation_needed(AddressConsolidationNeededListener cb);

    public static void remove_error_listener(EventId event) {
        long a0 = event.mNativeObj;
        event.mNativeObj = 0;

        do_remove_error_listener(a0);

        JNIReachabilityFence.reachabilityFence1(event);
    }
    private static native void do_remove_error_listener(long event);

    public static void remove_new_transaction_listener(EventId event) {
        long a0 = event.mNativeObj;
        event.mNativeObj = 0;

        do_remove_new_transaction_listener(a0);

        JNIReachabilityFence.reachabilityFence1(event);
    }
    private static native void do_remove_new_transaction_listener(long event);

    public static void remove_confirmation_state_change_listener(EventId event) {
        long a0 = event.mNativeObj;
        event.mNativeObj = 0;

        do_remove_confirmation_state_change_listener(a0);

        JNIReachabilityFence.reachabilityFence1(event);
    }
    private static native void do_remove_confirmation_state_change_listener(long event);

    public static void remove_reattachment_listener(EventId event) {
        long a0 = event.mNativeObj;
        event.mNativeObj = 0;

        do_remove_reattachment_listener(a0);

        JNIReachabilityFence.reachabilityFence1(event);
    }
    private static native void do_remove_reattachment_listener(long event);

    public static void remove_broadcast_listener(EventId event) {
        long a0 = event.mNativeObj;
        event.mNativeObj = 0;

        do_remove_broadcast_listener(a0);

        JNIReachabilityFence.reachabilityFence1(event);
    }
    private static native void do_remove_broadcast_listener(long event);

    public static void remove_transfer_progress_listener(EventId event) {
        long a0 = event.mNativeObj;
        event.mNativeObj = 0;

        do_remove_transfer_progress_listener(a0);

        JNIReachabilityFence.reachabilityFence1(event);
    }
    private static native void do_remove_transfer_progress_listener(long event);

    public static void remove_balance_change_listener(EventId event) {
        long a0 = event.mNativeObj;
        event.mNativeObj = 0;

        do_remove_balance_change_listener(a0);

        JNIReachabilityFence.reachabilityFence1(event);
    }
    private static native void do_remove_balance_change_listener(long event);

    public static void remove_stronghold_status_change_listener(EventId event) {
        long a0 = event.mNativeObj;
        event.mNativeObj = 0;

        do_remove_stronghold_status_change_listener(a0);

        JNIReachabilityFence.reachabilityFence1(event);
    }
    private static native void do_remove_stronghold_status_change_listener(long event);

    public static void remove_address_consolidation_needed_listener(EventId event) {
        long a0 = event.mNativeObj;
        event.mNativeObj = 0;

        do_remove_address_consolidation_needed_listener(a0);

        JNIReachabilityFence.reachabilityFence1(event);
    }
    private static native void do_remove_address_consolidation_needed_listener(long event);

    public synchronized void delete() {
        if (mNativeObj != 0) {
            do_delete(mNativeObj);
            mNativeObj = 0;
       }
    }
    @Override
    protected void finalize() throws Throwable {
        try {
            delete();
        }
        finally {
             super.finalize();
        }
    }
    private static native void do_delete(long me);
    /*package*/ EventManager(InternalPointerMarker marker, long ptr) {
        assert marker == InternalPointerMarker.RAW_PTR;
        this.mNativeObj = ptr;
    }
    /*package*/ long mNativeObj;
}