// Automatically generated by flapigen
package org.iota.wallet;


public final class TransferBuilder {

    public TransferBuilder(AddressWrapper address, long amount) {
        long a0 = address.mNativeObj;
        address.mNativeObj = 0;

        mNativeObj = init(a0, amount);
        JNIReachabilityFence.reachabilityFence1(address);
    }
    private static native long init(long address, long amount);

    public final TransferBuilder with_remainder_value_strategy(RemainderValueStrategy strategy) {
        int a0 = strategy.getValue();
        long ret = do_with_remainder_value_strategy(mNativeObj, a0);
        TransferBuilder convRet = new TransferBuilder(InternalPointerMarker.RAW_PTR, ret);

        JNIReachabilityFence.reachabilityFence1(strategy);

        return convRet;
    }
    private static native long do_with_remainder_value_strategy(long self, int strategy);

    public final TransferBuilder with_indexation(IndexationPayload indexation) {
        long a0 = indexation.mNativeObj;
        indexation.mNativeObj = 0;

        long ret = do_with_indexation(mNativeObj, a0);
        TransferBuilder convRet = new TransferBuilder(InternalPointerMarker.RAW_PTR, ret);

        JNIReachabilityFence.reachabilityFence1(indexation);

        return convRet;
    }
    private static native long do_with_indexation(long self, long indexation);

    public final Transfer finish() {
        long ret = do_finish(mNativeObj);
        Transfer convRet = new Transfer(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_finish(long self);

    public synchronized void delete() {
        if (mNativeObj != 0) {
            do_delete(mNativeObj);
            mNativeObj = 0;
       }
    }
    @Override
    protected void finalize() throws Throwable {
        try {
            delete();
        }
        finally {
             super.finalize();
        }
    }
    private static native void do_delete(long me);
    /*package*/ TransferBuilder(InternalPointerMarker marker, long ptr) {
        assert marker == InternalPointerMarker.RAW_PTR;
        this.mNativeObj = ptr;
    }
    /*package*/ long mNativeObj;
}