// Automatically generated by flapigen
package org.iota.wallet;


public final class AccountSynchronizer {

    private AccountSynchronizer() {}

    public final AccountSynchronizer gap_limit(long limit) {
        long ret = do_gap_limit(mNativeObj, limit);
        AccountSynchronizer convRet = new AccountSynchronizer(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_gap_limit(long self, long limit);

    public final AccountSynchronizer skip_persistance() {
        long ret = do_skip_persistance(mNativeObj);
        AccountSynchronizer convRet = new AccountSynchronizer(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_skip_persistance(long self);

    public final AccountSynchronizer address_index(long address_index) {
        long ret = do_address_index(mNativeObj, address_index);
        AccountSynchronizer convRet = new AccountSynchronizer(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_address_index(long self, long address_index);

    public final SyncedAccount execute() {
        long ret = do_execute(mNativeObj);
        SyncedAccount convRet = new SyncedAccount(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_execute(long self);

    public synchronized void delete() {
        if (mNativeObj != 0) {
            do_delete(mNativeObj);
            mNativeObj = 0;
       }
    }
    @Override
    protected void finalize() throws Throwable {
        try {
            delete();
        }
        finally {
             super.finalize();
        }
    }
    private static native void do_delete(long me);
    /*package*/ AccountSynchronizer(InternalPointerMarker marker, long ptr) {
        assert marker == InternalPointerMarker.RAW_PTR;
        this.mNativeObj = ptr;
    }
    /*package*/ long mNativeObj;
}