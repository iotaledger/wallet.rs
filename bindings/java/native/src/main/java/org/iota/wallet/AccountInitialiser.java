// Automatically generated by flapigen
package org.iota.wallet;


public final class AccountInitialiser {

    private AccountInitialiser() {}

    public final AccountInitialiser signer_type(AccountSignerType signer_type_enum) {
        int a0 = signer_type_enum.getValue();
        long ret = do_signer_type(mNativeObj, a0);
        AccountInitialiser convRet = new AccountInitialiser(InternalPointerMarker.RAW_PTR, ret);

        JNIReachabilityFence.reachabilityFence1(signer_type_enum);

        return convRet;
    }
    private static native long do_signer_type(long self, int signer_type_enum);

    public final AccountInitialiser alias(String alias) {
        long ret = do_alias(mNativeObj, alias);
        AccountInitialiser convRet = new AccountInitialiser(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_alias(long self, String alias);

    public final AccountInitialiser created_at(long created_at) {
        long ret = do_created_at(mNativeObj, created_at);
        AccountInitialiser convRet = new AccountInitialiser(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_created_at(long self, long created_at);

    public final AccountInitialiser messages(Message[] messages) {
        long ret = do_messages(mNativeObj, messages);
        AccountInitialiser convRet = new AccountInitialiser(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_messages(long self, Message[] messages);

    public final AccountInitialiser addresses(Address[] addresses) {
        long ret = do_addresses(mNativeObj, addresses);
        AccountInitialiser convRet = new AccountInitialiser(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_addresses(long self, Address[] addresses);

    public final AccountInitialiser skip_persistance() {
        long ret = do_skip_persistance(mNativeObj);
        AccountInitialiser convRet = new AccountInitialiser(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_skip_persistance(long self);

    public final Account initialise() {
        long ret = do_initialise(mNativeObj);
        Account convRet = new Account(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_initialise(long self);

    public synchronized void delete() {
        if (mNativeObj != 0) {
            do_delete(mNativeObj);
            mNativeObj = 0;
       }
    }
    @Override
    protected void finalize() throws Throwable {
        try {
            delete();
        }
        finally {
             super.finalize();
        }
    }
    private static native void do_delete(long me);
    /*package*/ AccountInitialiser(InternalPointerMarker marker, long ptr) {
        assert marker == InternalPointerMarker.RAW_PTR;
        this.mNativeObj = ptr;
    }
    /*package*/ long mNativeObj;
}