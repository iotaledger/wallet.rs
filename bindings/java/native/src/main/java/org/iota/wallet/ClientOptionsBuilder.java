// Automatically generated by flapigen
package org.iota.wallet;


public final class ClientOptionsBuilder {

    public ClientOptionsBuilder() {
        mNativeObj = init();
    }
    private static native long init();

    public final ClientOptionsBuilder with_node(String node) {
        long ret = do_with_node(mNativeObj, node);
        ClientOptionsBuilder convRet = new ClientOptionsBuilder(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_with_node(long self, String node);

    public final ClientOptionsBuilder with_node_pool_urls(java.lang.String [] node_pool_urls) {
        long ret = do_with_node_pool_urls(mNativeObj, node_pool_urls);
        ClientOptionsBuilder convRet = new ClientOptionsBuilder(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_with_node_pool_urls(long self, java.lang.String [] node_pool_urls);

    public final ClientOptionsBuilder with_network(String network) {
        long ret = do_with_network(mNativeObj, network);
        ClientOptionsBuilder convRet = new ClientOptionsBuilder(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_with_network(long self, String network);

    public final ClientOptionsBuilder with_node_sync_interval(long node_sync_interval) {
        long ret = do_with_node_sync_interval(mNativeObj, node_sync_interval);
        ClientOptionsBuilder convRet = new ClientOptionsBuilder(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_with_node_sync_interval(long self, long node_sync_interval);

    public final ClientOptionsBuilder with_node_sync_disabled() {
        long ret = do_with_node_sync_disabled(mNativeObj);
        ClientOptionsBuilder convRet = new ClientOptionsBuilder(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_with_node_sync_disabled(long self);

    public final ClientOptionsBuilder with_local_pow(boolean local) {
        long ret = do_with_local_pow(mNativeObj, local);
        ClientOptionsBuilder convRet = new ClientOptionsBuilder(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_with_local_pow(long self, boolean local);

    public final ClientOptionsBuilder with_request_timeout(long timeout) {
        long ret = do_with_request_timeout(mNativeObj, timeout);
        ClientOptionsBuilder convRet = new ClientOptionsBuilder(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_with_request_timeout(long self, long timeout);

    public final ClientOptionsBuilder with_api_timeout(Api api, long timeout) {
        int a0 = api.getValue();
        long ret = do_with_api_timeout(mNativeObj, a0, timeout);
        ClientOptionsBuilder convRet = new ClientOptionsBuilder(InternalPointerMarker.RAW_PTR, ret);

        JNIReachabilityFence.reachabilityFence1(api);

        return convRet;
    }
    private static native long do_with_api_timeout(long self, int api, long timeout);

    public final ClientOptions build() {
        long ret = do_build(mNativeObj);
        ClientOptions convRet = new ClientOptions(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_build(long self);

    public synchronized void delete() {
        if (mNativeObj != 0) {
            do_delete(mNativeObj);
            mNativeObj = 0;
       }
    }
    @Override
    protected void finalize() throws Throwable {
        try {
            delete();
        }
        finally {
             super.finalize();
        }
    }
    private static native void do_delete(long me);
    /*package*/ ClientOptionsBuilder(InternalPointerMarker marker, long ptr) {
        assert marker == InternalPointerMarker.RAW_PTR;
        this.mNativeObj = ptr;
    }
    /*package*/ long mNativeObj;
}