// Automatically generated by flapigen
package org.iota.wallet;


public final class ClientOptionsBuilder {

    public ClientOptionsBuilder() {
        mNativeObj = init();
    }
    private static native long init();

    public final ClientOptionsBuilder withNode(String node) {
        long ret = do_withNode(mNativeObj, node);
        ClientOptionsBuilder convRet = new ClientOptionsBuilder(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_withNode(long self, String node);

    public final ClientOptionsBuilder withNodePoolUrls(java.lang.String [] node_pool_urls) {
        long ret = do_withNodePoolUrls(mNativeObj, node_pool_urls);
        ClientOptionsBuilder convRet = new ClientOptionsBuilder(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_withNodePoolUrls(long self, java.lang.String [] node_pool_urls);

    public final ClientOptionsBuilder withNetwork(String network) {
        long ret = do_withNetwork(mNativeObj, network);
        ClientOptionsBuilder convRet = new ClientOptionsBuilder(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_withNetwork(long self, String network);

    public final ClientOptionsBuilder withNodeSyncInterval(long node_sync_interval) {
        long ret = do_withNodeSyncInterval(mNativeObj, node_sync_interval);
        ClientOptionsBuilder convRet = new ClientOptionsBuilder(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_withNodeSyncInterval(long self, long node_sync_interval);

    public final ClientOptionsBuilder withNodeSyncDisabled() {
        long ret = do_withNodeSyncDisabled(mNativeObj);
        ClientOptionsBuilder convRet = new ClientOptionsBuilder(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_withNodeSyncDisabled(long self);

    public final ClientOptionsBuilder with_mqtt_mqtt_broker_options(BrokerOptions options) {
        long a0 = options.mNativeObj;
        options.mNativeObj = 0;

        long ret = do_with_mqtt_mqtt_broker_options(mNativeObj, a0);
        ClientOptionsBuilder convRet = new ClientOptionsBuilder(InternalPointerMarker.RAW_PTR, ret);

        JNIReachabilityFence.reachabilityFence1(options);

        return convRet;
    }
    private static native long do_with_mqtt_mqtt_broker_options(long self, long options);

    public final ClientOptionsBuilder withLocalPow(boolean local) {
        long ret = do_withLocalPow(mNativeObj, local);
        ClientOptionsBuilder convRet = new ClientOptionsBuilder(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_withLocalPow(long self, boolean local);

    public final ClientOptionsBuilder withRequestTimeout(long timeout) {
        long ret = do_withRequestTimeout(mNativeObj, timeout);
        ClientOptionsBuilder convRet = new ClientOptionsBuilder(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_withRequestTimeout(long self, long timeout);

    public final ClientOptionsBuilder withApiTimeout(Api api, long timeout) {
        int a0 = api.getValue();
        long ret = do_withApiTimeout(mNativeObj, a0, timeout);
        ClientOptionsBuilder convRet = new ClientOptionsBuilder(InternalPointerMarker.RAW_PTR, ret);

        JNIReachabilityFence.reachabilityFence1(api);

        return convRet;
    }
    private static native long do_withApiTimeout(long self, int api, long timeout);

    public final ClientOptions build() {
        long ret = do_build(mNativeObj);
        ClientOptions convRet = new ClientOptions(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_build(long self);

    public synchronized void delete() {
        if (mNativeObj != 0) {
            do_delete(mNativeObj);
            mNativeObj = 0;
       }
    }
    @Override
    protected void finalize() throws Throwable {
        try {
            delete();
        }
        finally {
             super.finalize();
        }
    }
    private static native void do_delete(long me);
    /*package*/ ClientOptionsBuilder(InternalPointerMarker marker, long ptr) {
        assert marker == InternalPointerMarker.RAW_PTR;
        this.mNativeObj = ptr;
    }
    /*package*/ long mNativeObj;
}