use std::{
    path::{Path, PathBuf},
    time::Duration,
};

use crate::jni_c_header::*;

use crate::client_options::*;
use crate::acc_manager::*;

use anyhow::Result as Result;

use env_logger::*;

use iota_wallet::client::{
    Api,
};

foreign_class!(class RustLogging {
    fn init() {
        env_logger::init();
    }
});

foreign_enum!(
    enum ManagerStorage {
        Stronghold = ManagerStorage::Stronghold,
        Sqlite = ManagerStorage::Sqlite,
    }
);

foreign_enum!(
    enum AccountSignerType {
        Stronghold = AccountSignerType::Stronghold,
        LedgerNano = AccountSignerType::LedgerNano,
        LedgerNanoSimulator = AccountSignerType::LedgerNanoSimulator,
    }
);

foreign_enum!(
    enum Api {
        GetTips = Api::GetTips,
        PostMessage = Api::PostMessage,
        GetOutput = Api::GetOutput,
    }
);

foreign_class!(class ManagerOptions {
    self_type ManagerOptions;
    constructor ManagerOptions::default() -> ManagerOptions;
    fn ManagerOptions::setStoragePath(&mut self, storage_path: PathBuf);
    fn ManagerOptions::setStorageType(&mut self, storage_type: ManagerStorage);
    fn ManagerOptions::setStoragePassword(&mut self, storage_password: String);
});

foreign_class!(class AccountManager {
    self_type AccountManager;
    constructor AccountManager::new(options: ManagerOptions) -> AccountManager;
    fn AccountManager::stopBackgroundSync(&mut self,) -> Result<()>;
    fn AccountManager::setStoragePassword(&mut self, password: &str) -> Result<()>;
    fn AccountManager::setStrongholdPassword(&mut self, password: &str) -> Result<()>;
    fn AccountManager::changeStrongholdPassword(&mut self, current_password: &str, new_password: &str) -> Result<()>;
    fn AccountManager::generateMnemonic(&mut self) -> Result<String>;
    fn AccountManager::storeMnemonic(&mut self, signer_type_enum: AccountSignerType, mnemonic: String) -> Result<()>;
    fn AccountManager::verify_mnemonic(&mut self, mnemonic: String) -> Result<()>;
});

foreign_class!(class ClientOptionsBuilder {
    self_type ClientOptionsBuilder;
    constructor ClientOptionsBuilder::new() -> ClientOptionsBuilder;
    fn ClientOptionsBuilder::with_node(&mut self, node: &str) -> ClientOptionsBuilder;
    fn ClientOptionsBuilder::with_node_pool_urls(&mut self, node_pool_urls: Vec<String>) -> ClientOptionsBuilder;
    fn ClientOptionsBuilder::with_network(&mut self, network: String) -> ClientOptionsBuilder;
    fn ClientOptionsBuilder::with_node_sync_interval(&mut self, node_sync_interval: Duration) -> ClientOptionsBuilder;
    fn ClientOptionsBuilder::with_node_sync_disabled(&mut self) -> ClientOptionsBuilder;
    //fn ClientOptionsBuilder::with_mqtt_mqtt_broker_options(&mut self, options: BrokerOptions) -> ClientOptionsBuilder;
    fn ClientOptionsBuilder::with_local_pow(&mut self, local: bool) -> ClientOptionsBuilder;
    fn ClientOptionsBuilder::with_request_timeout(&mut self, timeout: Duration) -> ClientOptionsBuilder;
    fn ClientOptionsBuilder::with_api_timeout(&mut self, api: Api, timeout: Duration) -> ClientOptionsBuilder;
    fn ClientOptionsBuilder::build(&mut self) -> Result<ClientOptions>;รง
});

foreign_class!(class ClientOptions{
    self_type ClientOptions;
    private constructor = empty;
});