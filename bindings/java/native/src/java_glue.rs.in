use std::{
    path::{Path, PathBuf},
    time::Duration,
    str::FromStr,
    fmt::Display,
};

use chrono::prelude::{DateTime, Utc, Local};

use crate::{
    jni_c_header::*,
    client_options::*,
    bee_types::*,
    acc::*,
    acc_manager::*,
    message::*,
    address::*
};

use anyhow::Result as Result;

use log::debug;

use iota_wallet::{
    account::{
        AccountBalance,
    },
    message::{
        MessageType, Value, ValueUnit, MessageId
    },
    address::{
        OutputKind, AddressWrapper
    },
    client::{
        Api,
    }
};

foreign_class!(class RustLogging {
    fn init() {
        env_logger::init();
    }
});

foreign_enum!(
    enum RemainderValueStrategy {
        REUSE_ADDRESS = RemainderValueStrategy::ReuseAddress,
        CHANGE_ADDRESS = RemainderValueStrategy::ChangeAddress,
    }
);

foreign_enum!(
    enum ManagerStorage {
        STRONGHOLD = ManagerStorage::Stronghold,
        SQLITE = ManagerStorage::Sqlite,
    }
);

foreign_enum!(
    enum AccountSignerType {
        STRONGHOLD = AccountSignerType::Stronghold,
        LEDGER_NANO = AccountSignerType::LedgerNano,
        LEDGER_NANO_SIMULATOR = AccountSignerType::LedgerNanoSimulator,
    }
);

foreign_enum!(
    enum Api {
        GET_TIPS = Api::GetTips,
        POST_MESSAGE = Api::PostMessage,
        GET_OUTPUT = Api::GetOutput,
    }
);

foreign_enum!(
    enum MessageType {
        RECEIVED = MessageType::Received,
        SENT = MessageType::Sent,
        FAILED = MessageType::Failed,
        UNCONFIRMED = MessageType::Unconfirmed,
        VALUE = MessageType::Value,
    }
);

foreign_enum!(
    enum ValueUnit {
        I = ValueUnit::I,
        Ki = ValueUnit::Ki,
        Mi = ValueUnit::Mi,
        Gi = ValueUnit::Gi,
        Ti = ValueUnit::Ti,
        Pi = ValueUnit::Pi,
    }
);

foreign_enum!(
    enum OutputKind {
        SIGNATURE_LOCKED_SINGLE = OutputKind::SignatureLockedSingle,
        SIGNATURE_LOCKED_DUST_ALLOWANCE = OutputKind::SignatureLockedDustAllowance,
        TREASURY = OutputKind::Treasury,
    }
);

foreign_class!(class ManagerOptions {
    self_type ManagerOptions;
    constructor ManagerOptions::default() -> ManagerOptions;
    fn ManagerOptions::setStoragePath(&mut self, storage_path: PathBuf);
    fn ManagerOptions::setStorageType(&mut self, storage_type: ManagerStorage);
    fn ManagerOptions::setStoragePassword(&mut self, storage_password: String);
});

foreign_class!(class AccountManager {
    self_type AccountManager;
    constructor AccountManager::new(options: ManagerOptions) -> AccountManager;
    fn AccountManager::stopBackgroundSync(&mut self,) -> Result<()>;
    fn AccountManager::setStoragePassword(&mut self, password: &str) -> Result<()>;
    fn AccountManager::setStrongholdPassword(&mut self, password: &str) -> Result<()>;
    fn AccountManager::changeStrongholdPassword(&mut self, current_password: &str, new_password: &str) -> Result<()>;
    fn AccountManager::generateMnemonic(&mut self) -> Result<String>;
    fn AccountManager::storeMnemonic(&mut self, signer_type_enum: AccountSignerType, mnemonic: String) -> Result<()>;
    fn AccountManager::verifyMnemonic(&mut self, mnemonic: String) -> Result<()>;
    fn AccountManager::createAccount(&mut self, client_options: ClientOptions) -> Result<AccountInitialiser>;
});

foreign_class!(class ClientOptionsBuilder {
    self_type ClientOptionsBuilder;
    constructor ClientOptionsBuilder::new() -> ClientOptionsBuilder;
    fn ClientOptionsBuilder::withNode(&mut self, node: &str) -> ClientOptionsBuilder;
    fn ClientOptionsBuilder::withNodePoolUrls(&mut self, node_pool_urls: Vec<String>) -> ClientOptionsBuilder;
    fn ClientOptionsBuilder::withNetwork(&mut self, network: String) -> ClientOptionsBuilder;
    fn ClientOptionsBuilder::withNodeSyncInterval(&mut self, node_sync_interval: Duration) -> ClientOptionsBuilder;
    fn ClientOptionsBuilder::withNodeSyncDisabled(&mut self) -> ClientOptionsBuilder;
    //fn ClientOptionsBuilder::with_mqtt_mqtt_broker_options(&mut self, options: BrokerOptions) -> ClientOptionsBuilder;
    fn ClientOptionsBuilder::withLocalPow(&mut self, local: bool) -> ClientOptionsBuilder;
    fn ClientOptionsBuilder::withRequestTimeout(&mut self, timeout: Duration) -> ClientOptionsBuilder;
    fn ClientOptionsBuilder::withApiTimeout(&mut self, api: Api, timeout: Duration) -> ClientOptionsBuilder;
    fn ClientOptionsBuilder::build(&mut self) -> Result<ClientOptions>;
});

foreign_class!(class ClientOptions{
    self_type ClientOptions;
    private constructor = empty;
});

foreign_class!(
    #[derive(Display)]
    class Value {
        self_type Value;
        constructor Value::new(value: u64, unit: ValueUnit) -> Value;
        private fn Value::with_denomination(&self) -> String; alias to_string;
        fn Value::with_denomination(&self) -> String; alias withDenomination;
        fn Value::without_denomination(&self) -> u64; alias withoutDenomination;
        fn Value::value(&self) -> &u64;
    }
);
foreign_class!(
    #[derive(Display)]
    class MessageId {
        self_type MessageId;
        constructor MessageId::null() -> MessageId;
        private fn MessageId::to_string(&self) -> String;
        fn MessageId::fromString(str_rep: &str) -> MessageId {
            MessageId::from_str(str_rep).unwrap()
        }
    }
);

foreign_class!(
    #[derive(PartialEq)]
    class Message {
        self_type Message;
        private constructor = empty;
        private fn Message::eq(&self, o: &Message) -> bool; alias rustEq;
        fn Message::id(&self) -> MessageId;
        fn Message::version(&self) -> u64;
        fn Message::parents(&self) -> Vec<MessageId>;
        fn Message::payloadLength(&self) -> usize;
        fn Message::payload(&self) -> Option<MessagePayload>;
        fn Message::timestamp(&self) -> DateTime<Utc>;
        fn Message::nonce(&self) -> u64;
        fn Message::confirmed(&self) -> Option<bool>;
        fn Message::broadcasted(&self) -> bool;
        fn Message::incoming(&self) -> bool;
        fn Message::value(&self) -> u64;
        fn Message::remainderValue(&self) -> u64;
    }
);

foreign_class!(
    class MessagePayload {
        self_type MessagePayload;
        private constructor = empty;
    }
);

foreign_class!(
    class IndexationPayload {
        self_type IndexationPayload;
        private constructor = empty;
        //fn new(index: &[u8], data: &[u8]) -> Result<IndexationPayload>;
        fn IndexationPayload::index(&self) -> &[u8];
        fn IndexationPayload::data(&self) -> &[u8];
    }
);

foreign_class!(
    #[derive(PartialEq, Display)]
    class Address {
        self_type Address;
        private constructor = empty;
        private fn Address::eq(&self, o: &Address) -> bool; alias rustEq;
        private fn Address::to_string(&self) -> String;
        fn Address::balance(&self) -> u64; alias getBalance;
        fn Address::readable(&self) -> String; alias getReadable;
        fn Address::address(&self) -> AddressWrapper;
    }
);

foreign_class!(
    class AddressWrapper {
        self_type AddressWrapper;
        private constructor = empty;
        fn AddressWrapper::to_bech32(&self) -> String; alias toBech32;
    }
);

foreign_class!(
    class AccountInitialiser{
        self_type AccountInitialiser;
        private constructor = empty;
        fn AccountInitialiser::signerType(&mut self, signer_type_enum: AccountSignerType) -> AccountInitialiser;
        fn AccountInitialiser::alias(&mut self, alias: String) -> AccountInitialiser;
        fn AccountInitialiser::createdAt(&mut self, created_at: DateTime<Local>) -> AccountInitialiser;
        fn AccountInitialiser::messages(&mut self, messages: Vec<Message>) -> AccountInitialiser;
        fn AccountInitialiser::addresses(&mut self, addresses: Vec<Address>) -> AccountInitialiser;
        fn AccountInitialiser::skipPersistance(&mut self) -> AccountInitialiser;
        fn AccountInitialiser::initialise(&mut self) -> Result<Account>;
    }
);

foreign_class!(
    class AccountBalance {
        self_type AccountBalance;
        private constructor = empty;
        fn AccountBalance::getTotal(&self) -> u64 {
            this.total
        }
        fn AccountBalance::getAvailable(&self) -> u64 {
            this.available
        }
        fn AccountBalance::getIncoming(&self) -> u64 {
            this.incoming
        }
        fn AccountBalance::getOutgoing(&self) -> u64 {
            this.outgoing
        }
    }
);

foreign_class!(
    class Account {
        self_type Account;
        private constructor = empty;
        fn Account::transfer(&mut self, transfer: Transfer) -> Result<Message>;
        fn Account::generateAddress(&self) -> Result<Address>;
        fn Account::getUnusedAddress(&self) -> Result<Address>;
        fn Account::isLatestAddressUnused(&self) -> Result<bool>;
        fn Account::latestAddress(&self) -> Address;
        fn Account::setAlias(&self, alias: String) -> Result<()>;
        fn Account::setClientOptions(&self, options: ClientOptions) -> Result<()>;
        fn Account::listMessages(&self, count: usize, from: usize, message_type: Option<MessageType>) -> Vec<Message>;
        fn Account::listSpentAddresses(&self) -> Vec<Address>;
        fn Account::listUnspentAddresses(&self) -> Vec<Address>;
        fn Account::getMessage(&self, message_id: MessageId) -> Option<Message>;
        fn Account::alias(&self) -> String;
        fn Account::balance(&self) -> AccountBalance;
    }
);

foreign_class!(
    class Transfer {
        self_type Transfer;
        private constructor = empty;
        fn Transfer::builder(address: AddressWrapper, amount: u64) -> TransferBuilder;
    }
);

foreign_class!(
    class TransferBuilder {
        self_type TransferBuilder;
        constructor TransferBuilder::new(address: AddressWrapper, amount: u64) -> TransferBuilder;
        fn TransferBuilder::withRemainderValueStrategy(&mut self, strategy: RemainderValueStrategy) -> TransferBuilder;
        fn TransferBuilder::withIndexation(&mut self, indexation: IndexationPayload) -> TransferBuilder;
        fn TransferBuilder::finish(&self) -> Transfer;
    }
);
