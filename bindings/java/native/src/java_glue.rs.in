use std::{
    path::{Path, PathBuf},
    time::Duration,
    str::FromStr,
};

use chrono::prelude::{DateTime, Utc, Local};

use crate::{
    jni_c_header::*,
    client_options::*,
    acc::*,
    acc_manager::*,
    message::Message,
    address::Address
};

use anyhow::Result as Result;

use env_logger::*;

use iota_wallet::{
    message::{
        MessageType, Value, ValueUnit, MessageId
    },
    address::{
        OutputKind,
    },
    client::{
        Api,
    }
};

foreign_class!(class RustLogging {
    fn init() {
        env_logger::init();
    }
});

foreign_enum!(
    enum ManagerStorage {
        Stronghold = ManagerStorage::Stronghold,
        Sqlite = ManagerStorage::Sqlite,
    }
);

foreign_enum!(
    enum AccountSignerType {
        Stronghold = AccountSignerType::Stronghold,
        LedgerNano = AccountSignerType::LedgerNano,
        LedgerNanoSimulator = AccountSignerType::LedgerNanoSimulator,
    }
);

foreign_enum!(
    enum Api {
        GetTips = Api::GetTips,
        PostMessage = Api::PostMessage,
        GetOutput = Api::GetOutput,
    }
);

foreign_enum!(
    enum MessageType {
        /// Message received.
        Received = MessageType::Received,
        /// Message sent.
        Sent = MessageType::Sent,
        /// Message not broadcasted.
        Failed = MessageType::Failed,
        /// Message not confirmed.
        Unconfirmed = MessageType::Unconfirmed,
        /// A value message.
        Value = MessageType::Value,
    }
);

foreign_enum!(
    enum ValueUnit {
        I = ValueUnit::I,
        Ki = ValueUnit::Ki,
        Mi = ValueUnit::Mi,
        Gi = ValueUnit::Gi,
        Ti = ValueUnit::Ti,
        Pi = ValueUnit::Pi,
    }
);

foreign_enum!(
    enum OutputKind {
        SignatureLockedSingle = OutputKind::SignatureLockedSingle,
        SignatureLockedDustAllowance = OutputKind::SignatureLockedDustAllowance,
        Treasury = OutputKind::Treasury,
    }
);

foreign_class!(class ManagerOptions {
    self_type ManagerOptions;
    constructor ManagerOptions::default() -> ManagerOptions;
    fn ManagerOptions::setStoragePath(&mut self, storage_path: PathBuf);
    fn ManagerOptions::setStorageType(&mut self, storage_type: ManagerStorage);
    fn ManagerOptions::setStoragePassword(&mut self, storage_password: String);
});

foreign_class!(class AccountManager {
    self_type AccountManager;
    constructor AccountManager::new(options: ManagerOptions) -> AccountManager;
    fn AccountManager::stopBackgroundSync(&mut self,) -> Result<()>;
    fn AccountManager::setStoragePassword(&mut self, password: &str) -> Result<()>;
    fn AccountManager::setStrongholdPassword(&mut self, password: &str) -> Result<()>;
    fn AccountManager::changeStrongholdPassword(&mut self, current_password: &str, new_password: &str) -> Result<()>;
    fn AccountManager::generateMnemonic(&mut self) -> Result<String>;
    fn AccountManager::storeMnemonic(&mut self, signer_type_enum: AccountSignerType, mnemonic: String) -> Result<()>;
    fn AccountManager::verify_mnemonic(&mut self, mnemonic: String) -> Result<()>;
});

foreign_class!(class ClientOptionsBuilder {
    self_type ClientOptionsBuilder;
    constructor ClientOptionsBuilder::new() -> ClientOptionsBuilder;
    fn ClientOptionsBuilder::with_node(&mut self, node: &str) -> ClientOptionsBuilder;
    fn ClientOptionsBuilder::with_node_pool_urls(&mut self, node_pool_urls: Vec<String>) -> ClientOptionsBuilder;
    fn ClientOptionsBuilder::with_network(&mut self, network: String) -> ClientOptionsBuilder;
    fn ClientOptionsBuilder::with_node_sync_interval(&mut self, node_sync_interval: Duration) -> ClientOptionsBuilder;
    fn ClientOptionsBuilder::with_node_sync_disabled(&mut self) -> ClientOptionsBuilder;
    //fn ClientOptionsBuilder::with_mqtt_mqtt_broker_options(&mut self, options: BrokerOptions) -> ClientOptionsBuilder;
    fn ClientOptionsBuilder::with_local_pow(&mut self, local: bool) -> ClientOptionsBuilder;
    fn ClientOptionsBuilder::with_request_timeout(&mut self, timeout: Duration) -> ClientOptionsBuilder;
    fn ClientOptionsBuilder::with_api_timeout(&mut self, api: Api, timeout: Duration) -> ClientOptionsBuilder;
    fn ClientOptionsBuilder::build(&mut self) -> Result<ClientOptions>;
});

foreign_class!(class ClientOptions{
    self_type ClientOptions;
    private constructor = empty;
});

foreign_class!(
    class Value {
        self_type Value;
        constructor Value::new(value: u64, unit: ValueUnit) -> Value;
        fn Value::with_denomination(&self) -> String;
        fn Value::without_denomination(&self) -> u64;
        fn Value::value(&self) -> &u64;
    }
);
foreign_class!(
    class MessageId {
        self_type MessageId;
        fn MessageId::fromString(str_rep: &str) -> MessageId {
            MessageId::from_str(str_rep).unwrap()
        }
        constructor MessageId::null() -> MessageId;
    }
);

foreign_class!(
    #[derive(PartialEq)]
    class Message {
        self_type Message;
        private constructor = empty;
        private fn Message::eq(&self, o: &Message) -> bool; alias rustEq;
        fn Message::id(&self) -> MessageId;
        fn Message::version(&self) -> u64;
        fn Message::parents(&self) -> Vec<MessageId>;
        fn Message::payload_length(&self) -> usize;
        //fn Message::payload(&self) -> Payload;
        fn Message::timestamp(&self) -> DateTime<Utc>;
        fn Message::nonce(&self) -> u64;
        fn Message::confirmed(&self) -> Option<bool>;
        fn Message::broadcasted(&self) -> bool;
        fn Message::incoming(&self) -> bool;
        fn Message::value(&self) -> u64;
        fn Message::remainder_value(&self) -> u64;
    }
);

foreign_class!(
    #[derive(PartialEq)]
    class Address {
        self_type Address;
        private constructor = empty;
        private fn Address::eq(&self, o: &Address) -> bool; alias rustEq;
    }
);

foreign_class!(
    class AccountInitialiser{
        self_type AccountInitialiser;
        private constructor = empty;

        fn AccountInitialiser::signer_type(&mut self, signer_type_enum: AccountSignerType) -> AccountInitialiser;
        fn AccountInitialiser::alias(&mut self, alias: String) -> AccountInitialiser;
        fn AccountInitialiser::created_at(&mut self, created_at: DateTime<Local>) -> AccountInitialiser;
        fn AccountInitialiser::messages(&mut self, messages: Vec<Message>) -> AccountInitialiser;
        fn AccountInitialiser::addresses(&mut self, addresses: Vec<Address>) -> AccountInitialiser;
        fn AccountInitialiser::skip_persistance(&mut self) -> AccountInitialiser;
        //fn AccountInitialiser::initialise(&mut self) -> Result<AccountHandle>;
    }
);