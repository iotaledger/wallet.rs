plugins {
    id 'com.android.application'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "org.iota.example"
        minSdkVersion 24
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    externalNativeBuild {
        cmake {
            path file('CMakeLists.txt')
        }
    }
}

dependencies {
    implementation project(path: ':native')
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}


// ANCHOR:cargo
def libsPath = "${projectDir}/src/main/jniLibs"
def rustBuildType = "release"
def rustBasePath = "../../"
def archTriplets = [
        'armeabi-v7a': 'armv7-linux-androideabi',
        'arm64-v8a': 'aarch64-linux-android',
        'x86': 'i686-linux-android',
        'x86_64': 'x86_64-linux-android',
]
def androidShared = "$System.env.ANDROID_NDK_HOME/sources/cxx-stl/llvm-libc++/libs"

// build deps and move to JNI libs to be packaged
// TODO: only pass --release if buildType is release instead of a variable
archTriplets.each { arch, target ->
    // execute cargo metadata and get path to target directory
    tasks.create(name: "cargo-output-dir-${arch}", description: "Get cargo metadata") {
        new ByteArrayOutputStream().withStream { os ->
            exec {
                commandLine 'cargo', 'metadata', '--format-version', '1'
                workingDir rustBasePath
                standardOutput = os
            }
            def outputAsString = os.toString()
            def json = new groovy.json.JsonSlurper().parseText(outputAsString)
            logger.info("cargo target directory: ${json.target_directory}")
            project.ext.cargo_target_directory = json.target_directory
        }
    }
    // Build with cargo
    tasks.create(name: "cargo-build-${arch}", type: Exec, description: "Building core for ${arch}", dependsOn: "cargo-output-dir-${arch}") {
        workingDir "${rustBasePath}"
        commandLine "cargo", "ndk", "-t", "${arch}", "-o", "${libsPath}", "build", "--${rustBuildType}"
    }
    // Copy shared android dependencies
    tasks.create(name: "copy-android-deps-${arch}", type: Sync, dependsOn: "cargo-build-${arch}", description: "Copy Android shared lib for (${arch}) to jniLibs") {
        from "${androidShared}/${arch}"
        include "libc++_shared.so"
        into "${libsPath}/${arch}"
    }

    // Sync shared native dependencies
    tasks.create(name: "sync-rust-deps-${arch}", type: Sync, dependsOn: "copy-android-deps-${arch}", description: "Copy rust external libs for (${arch}) to jniLibs") {
        from "${rustBasePath}/src/libs/${arch}"
        include "*.so"
        into "${libsPath}/${arch}"
    }
    // Copy build libs into this app's libs directory
    tasks.create(name: "rust-deploy-${arch}", type: Copy, dependsOn: "sync-rust-deps-${arch}", description: "Copy compiled rust binary for (${arch}) to jniLibs") {
        from "${project.ext.cargo_target_directory}/${target}/${rustBuildType}"
        include "*.so"
        into "${libsPath}/${arch}"
    }

    // Hook up tasks to execute before building java
    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn "rust-deploy-${arch}"
    }
    preBuild.dependsOn "cargo-build-${arch}"

    // Hook up clean tasks
    tasks.create(name: "clean-${arch}", type: Delete, description: "Deleting built libs for ${arch}", dependsOn: "cargo-output-dir-${arch}") {
        delete fileTree("${project.ext.cargo_target_directory}/${target}/${rustBuildType}") {
            include '*.so'
        }
    }
    clean.dependsOn "clean-${arch}"
}