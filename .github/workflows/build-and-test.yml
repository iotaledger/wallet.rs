name: Build and run tests

on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - develop
    paths-ignore:
      - 'specs/**'
      - 'docs/**'

jobs:
  crate:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - uses: actions/checkout@v2

    - name: Install toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Get current date
      run: echo "CURRENT_DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
      if: matrix.os == 'macos-latest' || matrix.os == 'ubuntu-latest'

    - name: Get current date
      if: matrix.os == 'windows-latest'
      run: echo "CURRENT_DATE=$(Get-Date -Format "yyyy-MM-dd")" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Install required packages (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install libudev-dev libusb-1.0-0-dev

    - name: Cache cargo registry
      uses: actions/cache@v2.1.4
      with:
        path: ~/.cargo/registry
        # Add date to the cache to keep it up to date
        key: ${{ matrix.os }}-stable-cargo-registry-${{ hashFiles('**/Cargo.lock') }}-${{ env.CURRENT_DATE }}
        # Restore from outdated cache for speed
        restore-keys: |
          ${{ matrix.os }}-stable-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          ${{ matrix.os }}-stable-cargo-registry-
    - name: Cache cargo index
      uses: actions/cache@v2.1.4
      with:
        path: ~/.cargo/git
        # Add date to the cache to keep it up to date
        key: ${{ matrix.os }}-stable-cargo-index-${{ hashFiles('**/Cargo.lock') }}-${{ env.CURRENT_DATE }}
        # Restore from outdated cache for speed
        restore-keys: |
          ${{ matrix.os }}-stable-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          ${{ matrix.os }}-stable-cargo-index-
    - name: Cache cargo target
      uses: actions/cache@v2.1.4
      with:
        path: target
        # Add date to the cache to keep it up to date
        key: ${{ matrix.os }}-stable-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}-${{ env.CURRENT_DATE }}
        # Restore from outdated cache for speed
        restore-keys: |
          ${{ matrix.os }}-stable-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
          ${{ matrix.os }}-stable-cargo-build-target-

    # paho.mqtt requires openssl and OPENSSL_DIR on Windows
    - name: Install OpenSSL (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install openssl --no-progress
        echo "OPENSSL_DIR=C:\Program Files\OpenSSL-Win64" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Run tests
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --all-features --release

  nodejs-bindings:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
      - uses: actions/checkout@v2

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Set up Node.js 14.x
        uses: actions/setup-node@v2
        with:
          node-version: '14.x'

      - name: Get current date
        run: echo "CURRENT_DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
        if: matrix.os == 'macos-latest' || matrix.os == 'ubuntu-latest'

      - name: Get current date
        if: matrix.os == 'windows-latest'
        run: echo "CURRENT_DATE=$(Get-Date -Format "yyyy-MM-dd")" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Install required packages (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install libudev-dev libusb-1.0-0-dev

      - name: Cache cargo registry
        uses: actions/cache@v2.1.4
        with:
          path: ~/.cargo/registry
          # Add date to the cache to keep it up to date
          key: ${{ matrix.os }}-stable-cargo-registry-${{ hashFiles('**/Cargo.lock') }}-${{ env.CURRENT_DATE }}
          # Restore from outdated cache for speed
          restore-keys: |
            ${{ matrix.os }}-stable-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
            ${{ matrix.os }}-stable-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v2.1.4
        with:
          path: ~/.cargo/git
          # Add date to the cache to keep it up to date
          key: ${{ matrix.os }}-stable-cargo-index-${{ hashFiles('**/Cargo.lock') }}-${{ env.CURRENT_DATE }}
          # Restore from outdated cache for speed
          restore-keys: |
            ${{ matrix.os }}-stable-cargo-index-${{ hashFiles('**/Cargo.lock') }}
            ${{ matrix.os }}-stable-cargo-index-
     
      - name: Cache nodejs binding cargo target
        uses: actions/cache@v2.1.4
        with:
          path: bindings/nodejs/native/target
          # Add date to the cache to keep it up to date
          key: ${{ matrix.os }}-stable-cargo-build-node-target-${{ hashFiles('**/Cargo.lock') }}-${{ env.CURRENT_DATE }}
          # Restore from outdated cache for speed
          restore-keys: |
            ${{ matrix.os }}-stable-cargo-build-node-target-${{ hashFiles('**/Cargo.lock') }}
            ${{ matrix.os }}-stable-cargo-build-node-target-

      # paho.mqtt requires openssl and OPENSSL_ROOT_DIR on macOS
      - name: Set OpenSSL location (macOS)
        if: matrix.os == 'macos-latest'
        run: echo "OPENSSL_ROOT_DIR=$(brew --prefix openssl@1.1)" >> $GITHUB_ENV

      - name: Set OpenSSL location (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: echo "RUSTFLAGS=-L /usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV

      # paho.mqtt requires openssl and OPENSSL_ROOT_DIR on Windows
      # Prebuilt OpenSSL 1.1.1g from https://github.com/microsoft/vcpkg/releases/tag/2020.11
      - name: Install OpenSSL (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $ProgressPreference = 'SilentlyContinue'
          Invoke-WebRequest https://iotaledger-files.s3.eu-central-1.amazonaws.com/prebuild/openssl/windows/vcpkg-export-openssl-1.1.1g.zip -OutFile openssl.zip
          Expand-Archive openssl.zip
          Remove-Item openssl.zip
          echo "OPENSSL_ROOT_DIR=${{ github.workspace }}/openssl/installed/x64-windows-static" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Build nodejs binding
        run: yarn
        working-directory: bindings/nodejs

  python-bindings:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
      - uses: actions/checkout@v2

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # paho.mqtt requires openssl and OPENSSL_ROOT_DIR on macOS 
      - name: Set OpenSSL location (macOS) 
        if: matrix.os == 'macos-latest' 
        run: echo "OPENSSL_ROOT_DIR=$(brew --prefix openssl@1.1)" >> $GITHUB_ENV 

      - name: Set OpenSSL location (Linux) 
        if: matrix.os == 'ubuntu-latest' 
        run: echo "RUSTFLAGS=-L /usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV 

      # paho.mqtt requires openssl and OPENSSL_ROOT_DIR on Windows 
      # Prebuilt OpenSSL 1.1.1g from https://github.com/microsoft/vcpkg/releases/tag/2020.11 
      - name: Install OpenSSL (Windows) 
        if: matrix.os == 'windows-latest' 
        run: | 
          $ProgressPreference = 'SilentlyContinue' 
          Invoke-WebRequest https://iotaledger-files.s3.eu-central-1.amazonaws.com/prebuild/openssl/windows/vcpkg-export-openssl-1.1.1g.zip -OutFile openssl.zip 
          Expand-Archive openssl.zip 
          Remove-Item openssl.zip 
          echo "OPENSSL_ROOT_DIR=${{ github.workspace }}/openssl/installed/x64-windows-static" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append           

      - name: Get current date
        run: echo "CURRENT_DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
        if: matrix.os == 'macos-latest' || matrix.os == 'ubuntu-latest'

      - name: Get current date
        if: matrix.os == 'windows-latest'
        run: echo "CURRENT_DATE=$(Get-Date -Format "yyyy-MM-dd")" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Install required packages (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install libudev-dev libusb-1.0-0-dev

      - name: Cache cargo registry
        uses: actions/cache@v2.1.4
        with:
          path: ~/.cargo/registry
          # Add date to the cache to keep it up to date
          key: ${{ matrix.os }}-stable-cargo-registry-${{ hashFiles('**/Cargo.lock') }}-${{ env.CURRENT_DATE }}
          # Restore from outdated cache for speed
          restore-keys: |
            ${{ matrix.os }}-stable-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
            ${{ matrix.os }}-stable-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v2.1.4
        with:
          path: ~/.cargo/git
          # Add date to the cache to keep it up to date
          key: ${{ matrix.os }}-stable-cargo-index-${{ hashFiles('**/Cargo.lock') }}-${{ env.CURRENT_DATE }}
          # Restore from outdated cache for speed
          restore-keys: |
            ${{ matrix.os }}-stable-cargo-index-${{ hashFiles('**/Cargo.lock') }}
            ${{ matrix.os }}-stable-cargo-index-
     
      - name: Cache python binding cargo target
        uses: actions/cache@v2.1.4
        with:
          path: bindings/python/native/target
          # Add date to the cache to keep it up to date
          key: ${{ matrix.os }}-stable-cargo-build-python-target-${{ hashFiles('**/Cargo.lock') }}-${{ env.CURRENT_DATE }}
          # Restore from outdated cache for speed
          restore-keys: |
            ${{ matrix.os }}-stable-cargo-build-python-target-${{ hashFiles('**/Cargo.lock') }}
            ${{ matrix.os }}-stable-cargo-build-python-target-

      # paho.mqtt requires openssl and OPENSSL_DIR on Windows
      - name: Install OpenSSL (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install openssl --no-progress
          echo "OPENSSL_DIR=C:\Program Files\OpenSSL-Win64" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Build python binding
        run: cargo build --release
        working-directory: bindings/python/native
